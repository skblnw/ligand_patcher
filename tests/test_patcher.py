"""Tests for the LigandPatcher class."""

import os
import tempfile
import shutil
from pathlib import Path

import pytest

from ligand_patcher.patcher import LigandPatcher
from ligand_patcher.utils import pdb_to_gro_line, get_ligand_name_from_yml


class TestUtils:
    """Test utility functions."""
    
    def test_pdb_to_gro_line(self):
        """Test PDB to GRO conversion."""
        pdb_line = "ATOM      1  HZ1 NH4 N   1      -5.328  24.525  21.007  1.00  0.00      NH4"
        gro_line = pdb_to_gro_line(pdb_line, 1, 1)
        
        # Check format
        assert len(gro_line.strip()) > 0
        assert "NH4" in gro_line
        assert "HZ1" in gro_line
        
        # Check coordinate conversion (Ã… to nm)
        assert "-0.533" in gro_line  # -5.328/10
        assert "2.453" in gro_line   # 24.525/10
        assert "2.101" in gro_line   # 21.007/10


class TestLigandPatcher:
    """Test LigandPatcher class."""
    
    def setup_method(self):
        """Set up test fixtures."""
        self.temp_dir = tempfile.mkdtemp()
        self.system_dir = Path(self.temp_dir) / "system"
        self.ligand_dir = Path(self.temp_dir) / "ligand"
        
        # Create minimal test system
        self._create_test_system()
        self._create_test_ligand()
    
    def teardown_method(self):
        """Clean up after tests."""
        shutil.rmtree(self.temp_dir)
    
    def _create_test_system(self):
        """Create minimal test system directory."""
        gromacs_dir = self.system_dir / "gromacs"
        gromacs_dir.mkdir(parents=True)
        
        # Create minimal GRO file
        gro_content = """Generated by CHARMM-GUI FF-Converter
    3
    1THR      N    1   3.052   4.528   3.921
    1THR    HT1    2   2.980   4.455   3.902
    1THR     CA    3   3.149   4.476   4.025
   5.00000   5.00000   5.00000
"""
        with open(gromacs_dir / "step5_input.gro", "w") as f:
            f.write(gro_content)
        
        # Create minimal topology file
        top_content = """;;
;; Generated by CHARMM-GUI FF-Converter
;;

; Include forcefield parameters
#include "toppar/forcefield.itp"
#include "toppar/PROA.itp"
#include "toppar/TIP3.itp"

[ system ]
; Name
Title

[ molecules ]
; Compound	#mols
PROA  	           1
TIP3  	        1000
"""
        with open(gromacs_dir / "topol.top", "w") as f:
            f.write(top_content)
        
        # Create minimal index file
        ndx_content = """[ SOLU ]
   1    2    3

[ SOLV ]
   4    5    6
"""
        with open(gromacs_dir / "index.ndx", "w") as f:
            f.write(ndx_content)
        
        # Create minimal MDP file
        mdp_content = """define = -DPOSRES -DPOSRES_FC_BB=4000.0
integrator = md
dt = 0.001
"""
        with open(gromacs_dir / "step6.1_equilibration.mdp", "w") as f:
            f.write(mdp_content)
    
    def _create_test_ligand(self):
        """Create minimal test ligand directory."""
        self.ligand_dir.mkdir(parents=True)
        gromacs_dir = self.ligand_dir / "gromacs"
        gromacs_dir.mkdir()
        
        # Create ligand PDB
        pdb_content = """REMARK  GENERATE LIGAND
ATOM      1  HZ1 NH4 N   1      -5.328  24.525  21.007  1.00  0.00      NH4
ATOM      2  NZ  NH4 N   1      -5.923  23.930  20.412  1.00  0.00      NH4
TER       3      NH4      1
END
"""
        with open(self.ligand_dir / "ligandrm.pdb", "w") as f:
            f.write(pdb_content)
        
        # Create ligand YAML
        yml_content = """---
segid: HETB
orgresn: NH4
orgfile: s12a9_a_cl_nh4_hetb.mol
newresn: NH4
"""
        with open(self.ligand_dir / "ligandrm.yml", "w") as f:
            f.write(yml_content)
        
        # Create ligand ITP
        itp_content = """;;
;; GROMACS topology file for NH4
;;

[ moleculetype ]
; name	nrexcl
NH4	     2

[ atoms ]
; nr	type	resnr	residu	atom	cgnr	charge	mass
     1       HGP2      1      NH4    HZ1      1      0.330     1.0080
     2      NG3P3      1      NH4     NZ      2     -0.320    14.0070
"""
        with open(gromacs_dir / "NH4.itp", "w") as f:
            f.write(itp_content)
    
    def test_initialization(self):
        """Test LigandPatcher initialization."""
        patcher = LigandPatcher(
            str(self.system_dir), 
            str(self.ligand_dir),
            dry_run=True
        )
        
        assert patcher.system_dir == self.system_dir
        assert patcher.ligand_dir == self.ligand_dir
        assert patcher.dry_run is True
    
    def test_dry_run_patch(self):
        """Test dry run patching."""
        patcher = LigandPatcher(
            str(self.system_dir),
            str(self.ligand_dir), 
            dry_run=True
        )
        
        # Should not raise any exceptions
        patcher.patch()
    
    def test_coordinate_addition(self):
        """Test coordinate addition step."""
        patcher = LigandPatcher(
            str(self.system_dir),
            str(self.ligand_dir)
        )
        
        # Test coordinate parsing
        ligand_atoms = patcher._parse_ligand_pdb()
        assert len(ligand_atoms) == 2  # HZ1 and NZ atoms
        
        # Test residue number calculation  
        with open(patcher.system_gro, 'r') as f:
            lines = f.readlines()
        next_res = patcher._get_next_residue_number(lines)
        assert next_res == 2  # Should be next after residue 1
    
    def test_missing_files_validation(self):
        """Test validation with missing files."""
        # Remove required file
        os.remove(self.system_dir / "gromacs/step5_input.gro")
        
        with pytest.raises(FileNotFoundError):
            LigandPatcher(str(self.system_dir), str(self.ligand_dir))


if __name__ == "__main__":
    # Run basic tests if executed directly
    test_utils = TestUtils()
    test_utils.test_pdb_to_gro_line()
    
    test_patcher = TestLigandPatcher()
    test_patcher.setup_method()
    test_patcher.test_initialization()
    test_patcher.test_dry_run_patch()
    test_patcher.teardown_method()
    
    print("Basic tests passed!")